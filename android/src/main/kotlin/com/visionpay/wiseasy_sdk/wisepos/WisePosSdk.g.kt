// Autogenerated from Pigeon (v22.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.visionpay.wiseasy_sdk

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class PrinterAlign(val raw: Int) {
  LEFT(0),
  CENTER(1),
  RIGHT(2);

  companion object {
    fun ofRaw(raw: Int): PrinterAlign? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class BarcodeType(val raw: Int) {
  BARCODE_128(0),
  PDF_417(1),
  BARCODE_39(2);

  companion object {
    fun ofRaw(raw: Int): BarcodeType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PrinterTextInfo (
  val text: String,
  val align: PrinterAlign,
  val fontSize: Long,
  val width: Long,
  val columnSpacing: Long,
  val isBold: Boolean,
  val isItalic: Boolean,
  val isWithUnderline: Boolean,
  val isReverseText: Boolean
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PrinterTextInfo {
      val text = pigeonVar_list[0] as String
      val align = pigeonVar_list[1] as PrinterAlign
      val fontSize = pigeonVar_list[2] as Long
      val width = pigeonVar_list[3] as Long
      val columnSpacing = pigeonVar_list[4] as Long
      val isBold = pigeonVar_list[5] as Boolean
      val isItalic = pigeonVar_list[6] as Boolean
      val isWithUnderline = pigeonVar_list[7] as Boolean
      val isReverseText = pigeonVar_list[8] as Boolean
      return PrinterTextInfo(text, align, fontSize, width, columnSpacing, isBold, isItalic, isWithUnderline, isReverseText)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      text,
      align,
      fontSize,
      width,
      columnSpacing,
      isBold,
      isItalic,
      isWithUnderline,
      isReverseText,
    )
  }
}
private open class WisePosSdkPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PrinterAlign.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          BarcodeType.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PrinterTextInfo.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PrinterAlign -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is BarcodeType -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is PrinterTextInfo -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface WisePosChannel {
  fun initialize(callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by WisePosChannel. */
    val codec: MessageCodec<Any?> by lazy {
      WisePosSdkPigeonCodec()
    }
    /** Sets up an instance of `WisePosChannel` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: WisePosChannel?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.wiseasy_sdk.WisePosChannel.initialize$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.initialize{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/**
 * Printer Implementation
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface WisePosPrinterChannel {
  fun initialize()
  fun startPrinting(options: Map<String, Any>, callback: (Result<Unit>) -> Unit)
  fun printSample()
  fun addSingleText(textInfo: PrinterTextInfo)
  fun addMultiText(textInfoList: List<PrinterTextInfo>)
  fun addPicture(align: PrinterAlign, image: ByteArray)
  fun addBarCode(type: BarcodeType, width: Long, height: Long, barcode: String)
  fun addQrCode(width: Long, height: Long, qrCode: String)
  fun setLineSpacing(spacing: Long)
  fun feedPaper(dots: Long)
  fun getPrinterStatus(): Map<String, Any>
  fun setGrayLevel(level: Long)
  fun setPrintFont(data: Map<String, Any>)
  fun getPrinterMileage(): Double
  fun clearPrinterMileage()

  companion object {
    /** The codec used by WisePosPrinterChannel. */
    val codec: MessageCodec<Any?> by lazy {
      WisePosSdkPigeonCodec()
    }
    /** Sets up an instance of `WisePosPrinterChannel` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: WisePosPrinterChannel?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.wiseasy_sdk.WisePosPrinterChannel.initialize$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.initialize()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.wiseasy_sdk.WisePosPrinterChannel.startPrinting$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val optionsArg = args[0] as Map<String, Any>
            api.startPrinting(optionsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.wiseasy_sdk.WisePosPrinterChannel.printSample$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.printSample()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.wiseasy_sdk.WisePosPrinterChannel.addSingleText$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val textInfoArg = args[0] as PrinterTextInfo
            val wrapped: List<Any?> = try {
              api.addSingleText(textInfoArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.wiseasy_sdk.WisePosPrinterChannel.addMultiText$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val textInfoListArg = args[0] as List<PrinterTextInfo>
            val wrapped: List<Any?> = try {
              api.addMultiText(textInfoListArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.wiseasy_sdk.WisePosPrinterChannel.addPicture$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val alignArg = args[0] as PrinterAlign
            val imageArg = args[1] as ByteArray
            val wrapped: List<Any?> = try {
              api.addPicture(alignArg, imageArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.wiseasy_sdk.WisePosPrinterChannel.addBarCode$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val typeArg = args[0] as BarcodeType
            val widthArg = args[1] as Long
            val heightArg = args[2] as Long
            val barcodeArg = args[3] as String
            val wrapped: List<Any?> = try {
              api.addBarCode(typeArg, widthArg, heightArg, barcodeArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.wiseasy_sdk.WisePosPrinterChannel.addQrCode$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val widthArg = args[0] as Long
            val heightArg = args[1] as Long
            val qrCodeArg = args[2] as String
            val wrapped: List<Any?> = try {
              api.addQrCode(widthArg, heightArg, qrCodeArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.wiseasy_sdk.WisePosPrinterChannel.setLineSpacing$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val spacingArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.setLineSpacing(spacingArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.wiseasy_sdk.WisePosPrinterChannel.feedPaper$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val dotsArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.feedPaper(dotsArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.wiseasy_sdk.WisePosPrinterChannel.getPrinterStatus$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getPrinterStatus())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.wiseasy_sdk.WisePosPrinterChannel.setGrayLevel$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val levelArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.setGrayLevel(levelArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.wiseasy_sdk.WisePosPrinterChannel.setPrintFont$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val dataArg = args[0] as Map<String, Any>
            val wrapped: List<Any?> = try {
              api.setPrintFont(dataArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.wiseasy_sdk.WisePosPrinterChannel.getPrinterMileage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getPrinterMileage())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.wiseasy_sdk.WisePosPrinterChannel.clearPrinterMileage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.clearPrinterMileage()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/**
 * Device Implementation
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface WisePosDeviceChannel {
  fun getVersionInfo(): Map<String, String>
  fun getKernelVersion(): Map<String, String>
  fun getTamperStatus(): Map<String, Long>
  fun getDeviceSn(): String

  companion object {
    /** The codec used by WisePosDeviceChannel. */
    val codec: MessageCodec<Any?> by lazy {
      WisePosSdkPigeonCodec()
    }
    /** Sets up an instance of `WisePosDeviceChannel` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: WisePosDeviceChannel?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.wiseasy_sdk.WisePosDeviceChannel.getVersionInfo$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getVersionInfo())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.wiseasy_sdk.WisePosDeviceChannel.getKernelVersion$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getKernelVersion())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.wiseasy_sdk.WisePosDeviceChannel.getTamperStatus$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getTamperStatus())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.wiseasy_sdk.WisePosDeviceChannel.getDeviceSn$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getDeviceSn())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
